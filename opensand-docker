#!/bin/bash

command=$1

if [ "$command" = "-h" ]; then
	
	# help printing for opensand-docker command
        cat $PWD/help 

elif [ "$command" = "--simulate" ]; then

	#default parameters if not precised by user
	simulation_id=0
	delay=125
	fbw=50
	rbw=20
	ns=1
	nb_gw=1
	nb_sgw=0
	nb_clients=1
	nb_servers=1
	nb_st=1
	service="http"
	value_parameter=0

        #number of parameters given when launching the orchestrator     
        nb_parameters=($#-1)

        for ((i=2;i<=$nb_parameters;i+=2)); do

                string_name_parameter='$'${i}
                eval name_parameter="${string_name_parameter}"

		index_value_parameter=$((i+1))
        	string_value_parameter='$'${index_value_parameter}
        	eval value_parameter="$string_value_parameter"
		
		# if and elif corresponds to known entities. It's fine !
		if [[ $name_parameter = "-i" || $name_parameter = "--id" ]]; then
				simulation_id=$value_parameter
		
                elif [[ $name_parameter = "-c" || $name_parameter = "--client" ]]; then
                                nb_clients=$value_parameter
				if [ $nb_clients -gt 10 ]; then
                                	echo "More than 10 clients satellite terminals is not possible"
                                	exit
				fi
                
		elif [[ $name_parameter = "-st" || $name_parameter = "--satellite-terminal" ]] ; then
				nb_st=$value_parameter
                
		elif [[ $name_parameter = "-gw" || $name_parameter = "--gateway" ]] ; then
				nb_gw=$value_parameter
                
		elif [[ $name_parameter = "-sgw" || $name_parameter = "--split-gateway" ]] ; then
				nb_sgw=$value_parameter
               			nb_gw=0 
		elif [[ $name_parameter = "-s" || $name_parameter = "--server" ]] ; then
				nb_servers=$value_parameter

                elif [[ $name_parameter = "-d" || $name_parameter = "--delay" ]]; then
				delay=$value_parameter
                
		elif [[ $name_parameter = "-fbw" || $name_parameter = "--forward-bandwidth" ]]; then
				fbw=$value_parameter
                
		elif [[ $name_parameter = "-rbw" || $name_parameter = "--return-bandwidth" ]]; then
				rbw=$value_paramter
                
		elif [[ $name_parameter = "-ns" || $name_parameter = "--number-spot" ]]; then
				ns=$value_parameter

#		 elif [[ $name_parameter = "-mode" || $name_parameter = "--satellite-mode" ]]; then
#                                sat_mode=$value_parameter


                # a parameter / an entity not existing. please refer to the help with the following command : opensand-docker -h
                else
                        echo Parameter does not exist
                        exit
                fi
       done 
        


	#generate a simulation ID
	echo "" >> output
	echo "==== ${simulation_id} ====" >> output
	
	#launch sand-manager		
	manager_ip_address=192.168.1${simulation_id}.1
	manager_id=1
	sand-manager -i &
	echo "- sand-manager - ${manager_id}" >> output
	echo " - SAT_INTERFACE: 192.168.1${simulation_id}.1 (your Docker-host ip address in the opensand-network)" >> output 

	

	# docker images creation for Opensand : opensand-daemon, opensand-collector and opensand-ws	
	sudo ./Dockerfiles/docker-image-create
	
	# docker networks creation for Opensand : opensand-network, opensand-gw-network, lan1, lan2 ...
	sudo ./docker-networks/docker-network-create ${simulation_id}

	# First launching the collector for log
	./entites/collector/configuration.sh ${simulation_id} &
	collector_id=2	
	
	
	# Launching satellite 
        sudo ./entites/SAT/configuration.sh ${simulation_id} &
	sat_id=3 
	

	# Launching gateway(s)
	created_gw=0
        while [ ${created_gw} -ne $nb_gw ]
        do
        	created_gw=$((created_gw+1))

                sudo ./entites/GW/GW${created_gw}/configuration.sh ${simulation_id} &                    	
		gw_id=$((sat_id+created_gw))
					
	done
			
		
	# deploy split gateway(s)
	created_sgw=0
        while [ ${created_sgw} -ne $nb_sgw ]
        do

        	created_sgw=$((created_sgw+1))

		./entites/SGW/SGW${created_sgw}/GW-PHY/configuration.sh ${simulation_id} &
					
		./entites/SGW/SGW${created_sgw}/GW-NET-ACC/configuration.sh ${simulation_id} &
	        gw_id=$((sat_id+created_sgw))

         done

	
	# deploy satellite terminal(s)
	created_st=0
	st_string='ST'
	while [ ${created_st} -ne $nb_st ]
        do
        	created_st=$((created_st+1))
		index_st=$created_st
                name_st="${st_string}${index_st}"
                ./entites/ST/${name_st}/configuration.sh ${simulation_id} &
		st_id=$((gw_id+index_st))
	done

			
		
	# deploy servers
	total_created_gw=$(($created_gw+$created_sgw))
	for ((i=1;i<=$total_created_gw;i++))
        do
           for ((j=1;j<=$nb_servers;j++))
           do
		sudo ./entites/WS/WS${i}/configuration.sh ${j} ${simulation_id} &
           done
	done

	# deploy clients
	last_ws=$((2+created_st))
	#index_ws=$((created_gw+1))
	for ((i=3;i<=$last_ws;i++))
	do
        	for ((j=1;j<=$nb_clients;j++))
               	do
                        sudo ./entites/WS/WS${i}/configuration.sh ${j} ${simulation_id} &
                done
	done

	

# current simulation
elif [ "$command" = "--list-simulation" ]; then
	cat ./output

#changing simulation parameters
elif [ "$command" = "--simulation-change" ]; then

        #default parameters if not precised by user
	simulation_id=0
	delay_to_change=0	
	fbw_to_change=0
	mode_to_change=0

	created_gw=$(docker ps |grep opensand-daemon |grep gw |wc -l)
	created_sgw=$(docker ps|grep opensand-daemon|grep sgw |wc -l)
	created_st=$(docker ps|grep opensand-daemon|grep st |wc -l)

        nb_parameters=($#-1)
        for ((i=2;i<=$nb_parameters;i+=2)); do

                string_name_parameter='$'${i}
                eval name_parameter="${string_name_parameter}"

                index_value_parameter=$((i+1))
                string_value_parameter='$'${index_value_parameter}
                eval value_parameter="$string_value_parameter"

		if [[ $name_parameter = "-i" ]]; then
				simulation_id=$value_parameter
				
		elif [[ $name_parameter = "-gw" ]]; then
				gw_id=$value_parameter	
		
                elif [[ $name_parameter = "-d" || $name_parameter = "--delay" ]]; then
                                delay_to_change=1
				delay=$value_parameter

                elif [[ $name_parameter = "-fbw" || $name_parameter = "--forward-bandwidth" ]]; then
                                fbw_to_change=1
				fbw=$value_parameter

                elif [[ $name_parameter = "-rbw" || $name_parameter = "--return-bandwidth" ]]; then
                                rbw=$value_parameter

                elif [[ $name_parameter = "-spot" || $name_parameter = "--number-spot" ]]; then
                                spot_id=$value_parameter


                elif [[ $name_parameter = "--change-mode" ]]; then
                                mode_to_change=1
				sat_mode=$value_parameter
                
		elif [[ $name_parameter = "--internet-access" ]]; then
                                if [[ $value_parameter = "yes" ]]; then
					sudo ./internet_access/internet_access.sh ${simulation_id}
				fi	
		fi
		            
	done
	
	#connect to the manager in order to stop the running simulation and modify parameters
	
	if [ $delay_to_change = 1 ] || [ $mode_to_change = 1 ] ; then
	
		manager_ip_address=192.168.1${simulation_id}.1	
		sudo nc ${manager_ip_address} 5656 < ./nc_commands/stop.txt
	
		# we need all entities to be stopped in order to modify parameters
		daemon_running=$((1+$created_gw+$created_sgw+$created_st))
		while [ "$daemon_running" -gt 0 ]; do
			daemon_running=0
			for ((i=1;i<=$created_gw;i+=1)); do
					calcul=$(docker exec -it gw${i}-${simulation_id} ps -ef |grep 192.168.10 |wc -l)
					daemon_running=$((daemon_running+calcul))
			done
			for ((i=1;i<=$created_sgw;i+=1)); do
					calcul=$(docker exec -it sgw${i}-phy-${simulation_id} ps -ef |grep 192.168.10 |wc -l)
					daemon_running=$((daemon_running+calcul))
					calcul=$(calcul + docker exec -it sgw${i}-net-acc-${simulation_id} ps -ef |grep 192.168.10 |wc -l)
                                	daemon_running=$((daemon_running+calcul))
			done
        	        for ((i=1;i<=$created_st;i+=1)); do
					calcul=$(docker exec -it st${i}-${simulation_id} ps -ef |grep 192.168.10 |wc -l)
                        	        daemon_running=$((daemon_running+calcul))
			done
				        calcul=$(docker exec -it sat-${simulation_id} ps -ef |grep 192.168.10 |wc -l)
					daemon_running=$((daemon_running+calcul))
		done
	
		# Now entities are stopped, we can change parameters
		sudo nc ${manager_ip_address} 5656 < ./nc_commands/exit.txt
	
	
		# Change of the delay
		if [[ $delay_to_change = 1 ]]; then
			sudo sed -i 's+<delay>.*</delay>+<delay>'${delay}'</delay>+g' /root/.opensand/default/core_global.conf
		fi
		
		# Change the bandwidth
		if [[ $fbw_to_change = 1 ]]; then
			k=$((spot_id*gw_id))
			n_line=$(cat /root/.opensand/default/core_global.conf |grep -n "<bandwidth*" |awk '{print $1}' FS=":" |head -n $k |tail -n 1)
			sudo sed -i ''${n_line}'s/<bandwidth>.*<\/bandwidth>/<bandwidth>'${fbw}'<\/bandwidth>/' /root/.opensand/default/core_global.conf
		fi

                if [[ $mode_to_change = 1 ]]; then

			echo "on change le modeeeeeeeeeeeeeeeeee"
			echo "$sat_mode"
                        
			if [[ "$sat_mode" -eq "transparent" ]]; then
				echo "on est en transparent"
                                sudo sed -i 's/<satellite_type>.*<\/satellite_type>/<satellite_type>transparent<\/satellite_type>/g' /root/.opensand/default/core_global.conf
                                sudo sed -i '21s/<encap_scheme pos="0".*/<encap_scheme pos="0" encap="GSE"\/>/g' /root/.opensand/default/core_global.conf



                        elif [[ "$sat_mode" -eq "regenerative" ]]; then
				echo "on est en regenerative"
				sudo sed -i 's/<satellite_type>.*<\/satellite_type>/<satellite_type>regenerative<\/satellite_type>/g' /root/.opensand/default/core_global.conf
                                sudo sed -i '21s/<encap_scheme pos="0".*/<encap_scheme pos="0" encap="RLE"\/>/g' /root/.opensand/default/core_global.conf

                        fi
                fi
 

		# Restarting the simulation
		sudo nc ${manager_ip_address} 5656 < ./nc_commands/start.txt
	
		# Waiting for all entities to restart ...
		daemon_wished=$((1+$created_gw+$created_sgw+$created_st))
		daemon_running=0
		
		while [  $daemon_running -ne $daemon_wished ];do
			daemon_running=0
			for ((i=1;i<=$created_gw;i+=1)); do
                                        calcul=$(docker exec -it gw${i}-${simulation_id} ps -ef |grep 192.168.10 |wc -l)
                                        daemon_running=$((daemon_running+calcul))
                        done
                        for ((i=1;i<=$created_sgw;i+=1)); do
                                        calcul=$(docker exec -it sgw${i}-phy-${simulation_id} ps -ef |grep 192.168.10 |wc -l)
                                       	daemon_running=$((daemon_running+calcul))
                                        calcul=$(docker exec -it sgw${i}-net-acc-${simulation_id} ps -ef |grep 192.168.10 |wc -l)
                                        daemon_running=$((daemon_running+calcul))
                       done
                        for ((i=1;i<=$created_st;i+=1)); do
                                        calcul=$(docker exec -it st${i}-${simulation_id} ps -ef |grep 192.168.10 |wc -l)
                                        daemon_running=$((daemon_running+calcul))
                        done

	                calcul=$(docker exec -it sat-${simulation_id} ps -ef |grep 192.168.10 |wc -l)
	                daemon_running=$((daemon_running+calcul))
			echo "$daemon_running"
		done

		sudo nc ${manager_ip_address} 5656 < ./nc_commands/exit.txt

	fi	
	
# remove the current architecture
elif [ "$command" = "--destroy" ]; then
	sudo docker stop $(docker ps -aq)
	sudo docker rm $(docker ps -aq)
	pgrep avahi| xargs kill
	simulation_id=0
        nb_parameters=($#-1)
	if [[ $nb_parameter -gt 0 ]]; then
		simulation_id=$3
	fi
	sudo ./docker-networks/docker-network-destroy ${simulation_id}
	echo > output


else
	echo Command not found
fi
